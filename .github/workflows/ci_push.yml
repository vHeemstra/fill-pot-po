name: push > Lint / Test / Version / Publish / Release

on:
  push:
    branches:
      - main
    # Only run when push includes commits with changes to:
    paths:
      - 'src/**'
      - '.npmignore'
      - 'LICENSE'
      - 'package.json'
      - 'readme.md'
      - 'test/**' # TODO: delete!

jobs:
  # lint:
  #   name: Lint
  #   if: |
  #     !startsWith(github.event.head_commit.message, 'Release version ')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out repository
  #       uses: actions/checkout@v3
  #     - name: Install Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16.x
  #         # cache: 'npm'
  #     - run: npm install
  #     - run: npm run lint

  test:
    name: Test (Node.js ${{ matrix.node-version }} on ${{ matrix.os }})
    # needs: lint
    strategy:
      fail-fast: false
      matrix:
        node-version:
          # - 12.x
          # - 14.x
          - 16.x
        os:
         - ubuntu-latest
         - windows-latest
         # - macos-latest
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          # cache: 'npm'
      - run: npm install
      # - run: npm test
      - run: npm run wintest

  # version_publish_release:
  #   name: Version / Publish / Release
  #   needs: test
  #   if: |
  #     !contains(github.event.head_commit.message, '[!VERSION]')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out repository
  #       uses: actions/checkout@v3
  #       with:
  #         token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  #     - name: Install Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16.x
  #         registry-url: https://registry.npmjs.org/

  #     # - run: git config --global user.name 'github-actions'
  #     # - run: git config --global user.email 'github-actions@github.com'
  #     - run: git config --global user.name 'vHeemstra'
  #     - run: git config --global user.email '17368112+vHeemstra@users.noreply.github.com'

  #     # TODO? check all commits since last (= current) version instead of only the head_commit

  #     - name: Major version
  #       if: |
  #         startsWith(github.event.head_commit.message, 'breaking') ||
  #         startsWith(github.event.head_commit.message, 'major:')
  #       run: echo "NEW_VERSION=$(npm version major -m 'Release version %s')" >> $GITHUB_ENV
  #     - name: Minor version
  #       if: |
  #         startsWith(github.event.head_commit.message, 'feat') ||
  #         startsWith(github.event.head_commit.message, 'minor:')
  #       run: echo "NEW_VERSION=$(npm version minor -m 'Release version %s')" >> $GITHUB_ENV
  #     - name: Patch version
  #       if: |
  #         !startsWith(github.event.head_commit.message, 'breaking') &&
  #         !startsWith(github.event.head_commit.message, 'major:') &&
  #         !startsWith(github.event.head_commit.message, 'feat') &&
  #         !startsWith(github.event.head_commit.message, 'minor:')
  #       run: echo "NEW_VERSION=$(npm version patch -m 'Release version %s')" >> $GITHUB_ENV

  #     - name: Push new version and tag
  #       run: git push --follow-tags

  #     - name: Publish to NPM
  #       run: npm publish
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  #     - name: Create GitHub release
  #       run: gh release create ${{ env.NEW_VERSION }} --generate-notes
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
